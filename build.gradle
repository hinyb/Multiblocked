buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url = 'https://maven.minecraftforge.net' }
		maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

repositories {
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven { url 'https://dvs1.progwml6.com/files/maven' }
    maven { url "https://maven.shedaniel.me" }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
    maven {
        // Location of the maven for mixed mappings, Registrate, and Flywheel
        name 'tterrag maven'
        url 'https://maven.tterrag.com'
    }
}

apply from: 'version.gradle'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
// MixinGradle:
apply plugin: 'org.spongepowered.mixin'

version = "${minecraft_version}-${mod_version}"
group = 'com.lowdragmc.multiblocked'
archivesBaseName = "${mod_name}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

// from gti
import org.apache.tools.ant.taskdefs.condition.Os
static def getPathSeparator() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return ";"
    }
    return ":"
}

def shouldCheckEnv() {
    return findProject(':LDLib') != null
}

def isVSTask() {
    return gradle.startParameter.taskNames[0].equals("genVSCodeRuns")
}

def isJetBrainsRuntime() {
    return System.getProperty('java.vm.vendor').contains('JetBrains')
}

def getEnv() {
    boolean vscode = isVSTask()
    String resourcePath = vscode ? 'bin/main' : 'build/resources/main'
    String codePath = vscode ? 'bin/main' : 'build/classes/java/main'
    String s = "multiblocked%%${project.file(resourcePath)}" + getPathSeparator() + "multiblocked%%${project.file(codePath)}"
    if (findProject(':LDLib') != null) {
        s += getPathSeparator() + "ldlib%%${project(':LDLib').file(resourcePath)}" + getPathSeparator() + "ldlib%%${project(':LDLib').file(codePath)}"
    }
    return s
}

println("is LDLib found:")
println(findProject(':LDLib') != null)

minecraft {
    mappings channel: "parchment", version: "${mappings_version}"

    runs {
        client {
            workingDirectory project.file('run')

            arg "-mixin.config=multiblocked.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property "file.encoding", "UTF-8"

            if (isJetBrainsRuntime()) {
                jvmArgs "-XX:+AllowEnhancedClassRedefinition"
                jvmArgs "-XX:HotswapAgent=fatjar"
            }

            if (findProject(':LDLib') != null) arg "-mixin.config=ldlib.mixins.json"
            if (shouldCheckEnv()) {
                environment 'MOD_CLASSES', getEnv()
            }

            mods {
                multiblocked {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=multiblocked.mixins.json"
            property 'forge.logging.console.level', 'debug'
            property "file.encoding", "UTF-8"

            if (isJetBrainsRuntime()) {
                jvmArgs "-XX:+AllowEnhancedClassRedefinition"
                jvmArgs "-XX:HotswapAgent=fatjar"
            }

            if (findProject(':LDLib') != null) arg "-mixin.config=ldlib.mixins.json"
            if (shouldCheckEnv()) {
                environment 'MOD_CLASSES', getEnv()
            }

            mods {
                multiblocked {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            if (findProject(':LDLib') != null) arg "-mixin.config=ldlib.mixins.json"
            if (shouldCheckEnv()) {
                environment 'MOD_CLASSES', getEnv()
            }

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'multiblocked', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                multiblocked {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    // Apply Mixin AP

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    // LDLib
    if (findProject(':LDLib') != null) {
        implementation project(path: ':LDLib')
    } else {
        //compileOnly sources jar.
        runtimeOnly fg.deobf("com.github.Low-Drag-MC:LDLib:${ldlib_version}")
        compileOnly ("com.github.Low-Drag-MC:LDLib:${ldlib_version}")
    }

    // KubeJS
    implementation fg.deobf("dev.latvian.mods:kubejs-forge:${kubejs_version}")
    implementation fg.deobf("dev.latvian.mods:rhino-forge:${rhino_version}")
    implementation fg.deobf("dev.architectury:architectury-forge:${architectury_version}")

    // Rubidium
    compileOnly fg.deobf("curse.maven:rubidium-574856:3749094")

    //botania
    compileOnly fg.deobf("curse.maven:botania-225643:3789677")
    //mekanism
    compileOnly fg.deobf("curse.maven:mekanism-268560:3743835")
    // patchouli
    compileOnly fg.deobf("curse.maven:patchouli-306770:3729975")
    // curios
    compileOnly fg.deobf("curse.maven:curios-309927:3748873")
    // create
    compileOnly fg.deobf("curse.maven:create-328085:4007544")
    // flywheel
    compileOnly fg.deobf("curse.maven:flywheel-486392:3934664")
    // projecte
    compileOnly fg.deobf("curse.maven:projecte-226410:3722831")
    // nature's aura
    compileOnly fg.deobf("curse.maven:natures-aura-306626:3813427")
    // pneumaticcraft
    compileOnly fg.deobf("curse.maven:pneumaticcraft-repressurized-281849:3837268")
    // registrate:Registrate
    compileOnly fg.deobf("com.tterrag.registrate:Registrate:MC1.18.2-1.1.3")

    // geckolib
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.18:3.0.42')
    // FTB Chunks
    compileOnly fg.deobf("curse.maven:ftb_chunks_forge-314906:4375248")
    compileOnly fg.deobf("curse.maven:ftb_library_forge-404465:4210935")
    compileOnly fg.deobf("curse.maven:ftb_teams_forge-404468:4375188")
    // Valkyrien Skies
    compileOnly fg.deobf("curse.maven:valkyrien-skies-258371:4367151")
    // Kotlin for Forge
    compileOnly fg.deobf("curse.maven:kotlin-for-forge-351264:4311661")

    // JEI
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    implementation fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
    // REI
    compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-default-plugin-forge:${rei_version}")
    compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-api-forge:${rei_version}")
    compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rei_version}")

    compileOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}")

    if (System.getProperty('idea.sync.active') != 'true') {
        annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    }


}

mixin {
    add sourceSets.main, 'multiblocked.refmap.json'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": project.name,
                "Specification-Vendor": "Multiblocked",
                "Specification-Version": project.version,
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "Multiblocked",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs': 'multiblocked.mixins.json'
        ])
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveBaseName.set(project.archivesBaseName)
    archiveVersion.set("${project.version}")
    archiveClassifier.set('sources')
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            url "https://maven.firstdarkdev.xyz/snapshots"
            credentials {
                username System.getenv("MAVEN_USER")
                password System.getenv("MAVEN_PASS")
            }
        }
    }
}
